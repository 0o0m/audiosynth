{"name":"audiosynth","tagline":"JS Dynamic Audio Synth","body":"audiosynth\r\n==========\r\n\r\nDynamic waveform audio synthesizer, written in Javascript.\r\n\r\nGenerate musical notes dynamically\r\nthem in your browser using the HTML5 Audio Element.\r\n\r\nNo static files required. (Besides the source, of course!)\r\n\r\nDemo\r\n----\r\n\r\nTo see a demo of audiosynth in action, visit http://keithwhor.com/music/\r\n\r\n\r\nInstallation\r\n------------\r\n\r\nAssuming audiosynth.js is in your current directory, import package using:\r\n\r\n```html\r\n<script src=\"audiosynth.js\"></script>\r\n```\r\n\r\n\r\nUsage\r\n-----\r\n\r\naudiosynth implements a singleton class, ```AudioSynth```. By default, the global (window) variable ```Synth```\r\nis the instance of the class.\r\n\r\nAny attempt to instantiate new ```AudioSynth``` object will only create references to\r\nthe original object.\r\n\r\n```javascript\r\nSynth instanceof AudioSynth; // true\r\n\r\nvar testInstance = new AudioSynth;\r\ntestInstance instanceof AudioSynth; // true\r\n\r\ntestInstance === Synth; // true\r\n```\r\n\r\nTo use ```AudioSynth``` to generate .WAV files...\r\n\r\n```javascript\r\nSynth.generate(sound, note, octave, duration);\r\n/*\r\n\tWill generate a base64-encoded dataURI wavefile (.WAV) containing your data.\r\n\r\n\tsound\r\n\t\ta numeric index or string referring to a sound profile (by id or name, respectively)\r\n\t\r\n\tnote\r\n\t\tthe note you wish to play (A,B,C,D,E,F,G). Supports sharps (i.e. C#) but not flats.\r\n\t\t(Use the respective sharp!)\r\n\t\r\n\toctave\r\n\t\tthe octave # of the note you wish to play\r\n\t\t\r\n\tduration\r\n\t\tthe duration (in seconds) of the note\r\n*/\r\n```\r\n\r\nYou can play notes instantly using...\r\n\r\n```javascript\r\n/*\r\n\tSame arguments as Synth.generate,\r\n\tonly this creates an HTML Audio element, plays it, and unloads it upon completion.\r\n*/\r\nSynth.play(sound, note, octave, duration);\r\n```\r\n\r\nYou may also create individual instruments (objects that reference .generate and .play, bound to specific\r\nsounds).\r\n\r\n```javascript\r\nvar piano = Synth.createInstrument('piano');\r\npiano.play('C', 4, 2); // plays C4 for 2s using the 'piano' sound profile\r\n```\r\n\r\n\r\nSound Profiles\r\n--------------\r\n\r\n```AudioSynth``` comes with four default sound profiles.\r\n\r\n__piano__ (id 0)\r\n\r\n__organ__ (id 1)\r\n\r\n__acoustic__ (id 2)\r\n\r\n__edm__ (id 3)\r\n\r\n```javascript\r\nvar acoustic = Synth.createInstrument('acoustic'); // play with your acoustic guitar!\r\n```\r\n\r\n\r\nChanging Settings\r\n-----------------\r\n\r\nPoor performance? The default sampling rate for AudioSynth is 44100Hz (CD quality). This can be taxing on your browser.\r\n\r\n\r\nTo change the sampling rate, use ```Synth.setSampleRate(n)```\r\nPlease note that lower sampling rates will equate to poorer sound quality, especially for higher notes.\r\n\r\n```javascript\r\n// Can only set values between 4000Hz and 44100Hz.\r\nSynth.setSampleRate(20000); // sets sample rate to 20000Hz\r\n\r\nSynth.getSampleRate(); // returns 20000\r\n```\r\n\r\nVolume a bit much? Adust the volume of the sample similarly.\r\n\r\n```javascript\r\nSynth.setVolume(1.00); // set volume to 100%\r\nSynth.setVolume(0.40); // no, wait, 40%.\r\nSynth.setVolume(0.1337); // even better.\r\n\r\nSynth.getVolume(); // returns 0.1337\r\n```\r\n\r\n\r\nAdvanced Usage\r\n--------------\r\n\r\nAdditional sound profiles can be loaded using ```Synth.loadSoundProfile()```\r\n\r\n```javascript\r\n// Load a sound profile from an object...\r\nSynth.loadSoundProfile({\r\n\t// name it\r\n\tname: 'my_sound',\r\n\t// WIP: return the length of time, in seconds, the attack lasts\r\n\tattack: function(sampleRate, frequency, volume) { ... },\r\n\t// WIP: return a number representing the rate of signal decay.\r\n\t// larger = faster decay\r\n\tdampen: function(sampleRate, frequency, volume) { ... },\r\n\t// wave function: calculate the amplitude of your sine wave based on i (index)\r\n\twave: function(i, sampleRate, frequency, volume) {\r\n\t\t/*\r\n\t\tHere we have access to...\r\n\t\tthis.modulate : an array of loaded frequency\r\n\t\tthis.vars : any temporary variables you wish to keep track of\r\n\t\t*/\r\n\t}\r\n\t\r\n});\r\n```\r\n\r\nA rough guide to waveform generation can be found at http://keithwhor.com/music/\r\n\r\n\r\nDebugging\r\n---------\r\n\r\nIf you're hanging on note generation (for default or custom sound profiles), use ```Synth.debug()```\r\nto enable debugging.\r\n\r\n\r\nThis will log note generation times in your console.\r\n\r\n\r\nCredits and Acknowledgements\r\n----------------------------\r\n\r\nSpecial thanks to Albert Pham (http://www.sk89q.com/) for Dynamic .WAV file generation,\r\nthe work off of which this is based (http://www.sk89q.com/playground/jswav/)\r\nand Hasen el Judy (http://dev.hasenj.org/post/4517734448) for information regarding Karplus-Strong\r\nString Synthesis.\r\n\r\n\r\nFurther Reading\r\n---------------\r\n\r\n__.WAV Audio Files__\r\n\r\nhttp://en.wikipedia.org/wiki/.WAV_file\r\n\r\n\r\n__Sound Synthesis__\r\n\r\nhttp://www.acoustics.salford.ac.uk/acoustics_info/sound_synthesis/\r\n\r\n\r\n__\"acoustic\" sound profile__ generated using __Karplus-Strong String Synthesis__:\r\n\r\nhttp://en.wikipedia.org/wiki/Karplus%E2%80%93Strong_string_synthesis\r\nhttp://music.columbia.edu/cmc/musicandcomputers/chapter4/04_09.php\r\n\r\n\r\nContact\r\n-------\r\n\r\nFeel free to e-mail me at keithwhor at gmail dot com\r\n\r\nor follow me on Twitter, @keithwhor\r\n\r\nIf you like, feel free to share! :) Always appreciated.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}